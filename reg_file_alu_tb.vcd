$date
	Sat Feb 18 12:49:49 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module reg_file_alu_tb $end
$var wire 8 ! testsrcb [7:0] $end
$var wire 8 " testsrca [7:0] $end
$var wire 8 # t_cpu_out [7:0] $end
$var wire 1 $ t_Zero $end
$var wire 8 % t_ALUResult [7:0] $end
$var reg 1 & clk $end
$var reg 2 ' t_ALUControl [1:0] $end
$var reg 1 ( t_ALUSrc $end
$var reg 4 ) t_RA1 [3:0] $end
$var reg 4 * t_RA2 [3:0] $end
$var reg 4 + t_WA [3:0] $end
$var reg 8 , t_immediate [7:0] $end
$var reg 1 - t_write_enable $end
$scope module dut $end
$var wire 2 . ALUControl [1:0] $end
$var wire 1 ( ALUSrc $end
$var wire 1 & CLK $end
$var wire 4 / RA1 [3:0] $end
$var wire 4 0 RA2 [3:0] $end
$var wire 4 1 WA [3:0] $end
$var wire 8 2 immediate [7:0] $end
$var wire 8 3 testsrca [7:0] $end
$var wire 8 4 testsrcb [7:0] $end
$var wire 1 - write_enable $end
$var wire 8 5 x_srcB [7:0] $end
$var wire 8 6 x_srcA [7:0] $end
$var wire 8 7 x_RD2 [7:0] $end
$var wire 8 8 cpu_out [7:0] $end
$var wire 1 $ Zero $end
$var wire 8 9 ALUResult [7:0] $end
$scope module newalu $end
$var wire 2 : ALUControl [1:0] $end
$var wire 8 ; SrcB [7:0] $end
$var wire 1 $ Zero $end
$var wire 8 < SrcA [7:0] $end
$var reg 8 = ALUResult [7:0] $end
$upscope $end
$scope module newregfile $end
$var wire 8 > ALUResult [7:0] $end
$var wire 4 ? RA1 [3:0] $end
$var wire 4 @ RA2 [3:0] $end
$var wire 8 A RD1 [7:0] $end
$var wire 8 B RD2 [7:0] $end
$var wire 4 C WA [3:0] $end
$var wire 1 & clk $end
$var wire 8 D cpu_out [7:0] $end
$var wire 1 - write_enable $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx D
b0 C
bx B
bx A
b10 @
b0 ?
bx >
bx =
bx <
b111 ;
b10 :
bx 9
bx 8
bx 7
bx 6
b111 5
b111 4
bx 3
b111 2
b0 1
b10 0
b0 /
b10 .
1-
b111 ,
b0 +
b10 *
b0 )
1(
b10 '
0&
bx %
x$
bx #
bx "
b111 !
$end
#10
1&
#20
0&
#30
1&
#40
0&
